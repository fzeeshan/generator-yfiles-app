'use strict';
var path = require("path");
var webpack = require('webpack')
var UglifyJsPlugin = require('uglifyjs-webpack-plugin')

module.exports = function(env) {

  console.log("Running webpack...")

  var isDev = env === 'dev';

  var scriptsSrc = "<%= scriptsPath %>",
    libSrc = isDev ? "<%= libPath %>" : "<%= obfDest %>lib/",
    appSrc = isDev ? scriptsSrc + "<%= appScript %>" : "<%= obfDest %>scripts/app.js",
    destination = "app/dist/";

  var config = {

    // don't add the default SourceMapDevToolPlugin config
    devtool: false,

    entry: {
      app: [path.resolve(appSrc)]
    },

    plugins: [
      // extract yfiles and node modules to a separate webpack chunk
      new webpack.optimize.CommonsChunkPlugin({
        name: 'lib',
        minChunks (module) {
          return (
            module.resource &&
            /\.js$/.test(module.resource) &&
            (/lib[/\\]yfiles/.test(module.resource) || /node_modules[/\\]/.test(module.resource))
          )
        }
      })
    ],

    <% if (useTypeInfo) { %>
    alias: {
      "yfiles-typeinfo": path.resolve(scriptsSrc + "yfiles-typeinfo.js")
    }
    <% } %><% if (useTypeScript) { %>
    module: {
      loaders: [
        { test: /\.tsx?$/, loader: "ts-loader" }
      ]
    },
    <% } %><% if (useBabel && !useTypeScript) { %>
    module: {
      loaders: [
        {
          test: /\.es6$/,
          loader: 'babel-loader',
          options: {
            presets: ['env']
          }
        }
      ]
    },<% } %>
    resolve: {
      modules: ['node_modules', path.resolve(libSrc)],
    },

    output: {
      path: path.resolve(__dirname, destination),
      publicPath: 'dist',
      filename: '[name].js'
    },

    devServer: {
      contentBase: [path.join(__dirname, './app')],
      compress: true,
      port: 9003
    }
  };

  if(!isDev) {
    // For production, we want additional minification.
    config.plugins.push(new UglifyJsPlugin({
      uglifyOptions: {
        beautify: false,
        compress: {
          dead_code: false,
          conditionals: false
        },
        // keep the yFiles license header comments
        extractComments: false
      }
    }))
  }

  if(isDev) {
    config.plugins.push(new webpack.SourceMapDevToolPlugin({
      filename: '[file].map',
      // add source maps for non-library code to enable convenient debugging
      exclude: ['lib.js']
    }))
  }

  return config;

};
